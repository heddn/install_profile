diff --git a/core/modules/layout_builder/config/schema/layout_builder.schema.yml b/core/modules/layout_builder/config/schema/layout_builder.schema.yml
index 0bab48dfbb5..c2276ded4ef 100644
--- a/core/modules/layout_builder/config/schema/layout_builder.schema.yml
+++ b/core/modules/layout_builder/config/schema/layout_builder.schema.yml
@@ -56,6 +56,11 @@ layout_builder.component:
     additional:
       type: ignore
       label: 'Additional data'
+    third_party_settings:
+      type: sequence
+      label: 'Third party settings'
+      sequence:
+        type: '[%parent.%parent.%type].third_party.[%key]'
 
 inline_block:
   type: block_settings
diff --git a/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php b/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php
index 6b0da585453..0de360893ac 100644
--- a/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php
+++ b/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php
@@ -457,7 +457,7 @@ public function setComponent($name, array $options = []) {
 
       $section = $this->getDefaultSection();
       $region = $options['region'] ?? $section->getDefaultRegion();
-      $new_component = (new SectionComponent(\Drupal::service('uuid')->generate(), $region, $configuration));
+      $new_component = new SectionComponent(\Drupal::service('uuid')->generate(), $region, $configuration);
       $section->appendComponent($new_component);
     }
     return $this;
diff --git a/core/modules/layout_builder/src/Plugin/ConfigAction/AddComponent.php b/core/modules/layout_builder/src/Plugin/ConfigAction/AddComponent.php
index 57781f55afe..2d24f6f2163 100644
--- a/core/modules/layout_builder/src/Plugin/ConfigAction/AddComponent.php
+++ b/core/modules/layout_builder/src/Plugin/ConfigAction/AddComponent.php
@@ -121,7 +121,7 @@ public function apply(string $configName, mixed $value): void {
     // default, which will be overridden in insertComponent anyway.
     // We also need to generate the UUID here, or it could be null.
     $uuid = $component['uuid'] ?? $this->uuidGenerator->generate();
-    $component = new SectionComponent($uuid, $region, $component['configuration'], $component['additional'] ?? []);
+    $component = new SectionComponent($uuid, $region, $component['configuration'], $component['additional'] ?? [], $component['third_party_settings'] ?? []);
     // If the position is higher than the number of components, just put it last
     // instead of failing.
     $position = min($position, count($section->getComponentsByRegion($region)));
diff --git a/core/modules/layout_builder/src/SectionComponent.php b/core/modules/layout_builder/src/SectionComponent.php
index b0f8ff13e4f..c8af6f93cc5 100644
--- a/core/modules/layout_builder/src/SectionComponent.php
+++ b/core/modules/layout_builder/src/SectionComponent.php
@@ -3,6 +3,7 @@
 namespace Drupal\layout_builder;
 
 use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent;
 
@@ -18,7 +19,7 @@
  * @see \Drupal\layout_builder\Section
  * @see \Drupal\layout_builder\SectionStorageInterface
  */
-class SectionComponent {
+class SectionComponent implements ThirdPartySettingsInterface {
 
   /**
    * The UUID of the component.
@@ -52,9 +53,23 @@ class SectionComponent {
    * Any additional properties and values.
    *
    * @var mixed[]
+   *
+   * @deprecated in drupal:11.2.0 and is removed from drupal:12.0.0.
+   * Additional component properties should be set via ::setThirdPartySetting().
+   *
+   * @see https://www.drupal.org/node/3100177
    */
   protected $additional = [];
 
+  /**
+   * Third party settings.
+   *
+   * An array of key/value pairs keyed by provider.
+   *
+   * @var mixed[]
+   */
+  protected $thirdPartySettings = [];
+
   /**
    * Constructs a new SectionComponent.
    *
@@ -65,13 +80,25 @@ class SectionComponent {
    * @param mixed[] $configuration
    *   The plugin configuration.
    * @param mixed[] $additional
-   *   An additional values.
+   *   (optional) Additional values.
+   * @param array[] $third_party_settings
+   *   (optional) Any third party settings.
+   *
+   * @todo Remove $additional argument in
+   *   https://www.drupal.org/project/drupal/issues/3160644 in drupal:12.0.x.
    */
-  public function __construct($uuid, $region, array $configuration = [], array $additional = []) {
+  public function __construct($uuid, $region, array $configuration = [], array $additional = [], array $third_party_settings = []) {
     $this->uuid = $uuid;
     $this->region = $region;
     $this->configuration = $configuration;
+    // @todo Remove below $additional code when the drupal:12.0.x branch is opened.
+    // @see https://www.drupal.org/project/drupal/issues/3160644
+    // @phpstan-ignore-next-line
     $this->additional = $additional;
+    if ($additional !== []) {
+      @trigger_error('Setting additional properties is deprecated in drupal:11.3.0 and is removed from drupal:12.0.0. Additional component properties should be set via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177', E_USER_DEPRECATED);
+    }
+    $this->thirdPartySettings = $third_party_settings;
   }
 
   /**
@@ -99,6 +126,11 @@ public function toRenderArray(array $contexts = [], $in_preview = FALSE) {
    * @param string $property
    *   The property to retrieve.
    *
+   * @deprecated in drupal:11.3.0 and is removed from drupal:12.0.0.
+   * Additional properties should be gotten via ::getThirdPartySetting().
+   *
+   * @see https://www.drupal.org/node/3100177
+   *
    * @return mixed
    *   The value for that property, or NULL if the property does not exist.
    */
@@ -109,6 +141,7 @@ public function get($property) {
     else {
       $value = $this->additional[$property] ?? NULL;
     }
+    @trigger_error('Getting additional properties is deprecated in drupal:11.3.0 and is removed from drupal:12.0.0. Additional component properties should be gotten via ::getThirdPartySetting(). See https://www.drupal.org/node/3100177', E_USER_DEPRECATED);
     return $value;
   }
 
@@ -120,6 +153,11 @@ public function get($property) {
    * @param mixed $value
    *   The value to set.
    *
+   * @deprecated in drupal:11.2.0 and is removed from drupal:12.0.0.
+   * Additional properties should be set via ::setThirdPartySetting().
+   *
+   * @see https://www.drupal.org/node/3100177
+   *
    * @return $this
    */
   public function set($property, $value) {
@@ -129,6 +167,7 @@ public function set($property, $value) {
     else {
       $this->additional[$property] = $value;
     }
+    @trigger_error('Setting random section component properties is deprecated in drupal:11.3.0 and is removed from drupal:12.0.0. Component properties should be set via dedicated setters. See https://www.drupal.org/node/3100177', E_USER_DEPRECATED);
     return $this;
   }
 
@@ -187,7 +226,7 @@ public function setWeight($weight) {
    * @return mixed[]
    *   The component plugin configuration.
    */
-  protected function getConfiguration() {
+  public function getConfiguration() {
     return $this->configuration;
   }
 
@@ -293,7 +332,11 @@ public function toArray() {
       'region' => $this->getRegion(),
       'configuration' => $this->getConfiguration(),
       'weight' => $this->getWeight(),
+      // @todo Remove below key/value when the drupal:12.0.x branch is opened.
+      // @see https://www.drupal.org/project/drupal/issues/3160644
+      // @phpstan-ignore-next-line
       'additional' => $this->additional,
+      'third_party_settings' => $this->thirdPartySettings,
     ];
   }
 
@@ -309,12 +352,70 @@ public function toArray() {
    *   The section component object.
    */
   public static function fromArray(array $component) {
+    // Ensure expected array keys are present.
+    $component += [
+      'uuid' => '',
+      'region' => '',
+      'configuration' => [],
+      // @todo Remove below key/value when the drupal:12.0.x branch is opened.
+      // @see https://www.drupal.org/project/drupal/issues/3160644
+      'additional' => [],
+      'third_party_settings' => [],
+    ];
     return (new static(
       $component['uuid'],
       $component['region'],
       $component['configuration'],
-      $component['additional']
+      // @todo Remove below argument when the drupal:12.0.x branch is opened.
+      // @see https://www.drupal.org/project/drupal/issues/3160644
+      $component['additional'],
+      $component['third_party_settings']
     ))->setWeight($component['weight']);
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getThirdPartySetting($provider, $key, $default = NULL) {
+    return $this->thirdPartySettings[$provider][$key] ?? $default;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getThirdPartySettings($provider) {
+    return $this->thirdPartySettings[$provider] ?? [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setThirdPartySetting($provider, $key, $value) {
+    $this->thirdPartySettings[$provider][$key] = $value;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function unsetThirdPartySetting($provider, $key) {
+    unset($this->thirdPartySettings[$provider][$key]);
+    // If the third party is no longer storing any information, completely
+    // remove the array holding the settings for this provider.
+    if (empty($this->thirdPartySettings[$provider])) {
+      unset($this->thirdPartySettings[$provider]);
+    }
+    return $this;
+  }
+
+  /**
+   * Gets the list of third parties that store information.
+   *
+   * @return array
+   *   The list of third parties.
+   */
+  public function getThirdPartyProviders() {
+    return array_keys($this->thirdPartySettings);
+  }
+
 }
diff --git a/core/modules/layout_builder/tests/fixtures/update/layout-builder-sections.php b/core/modules/layout_builder/tests/fixtures/update/layout-builder-sections.php
new file mode 100644
index 00000000000..252b2f2e91f
--- /dev/null
+++ b/core/modules/layout_builder/tests/fixtures/update/layout-builder-sections.php
@@ -0,0 +1,102 @@
+<?php
+
+/**
+ * @file
+ * Test context mapping update path by adding a layout without a context map.
+ */
+
+use Drupal\Core\Database\Database;
+
+$connection = Database::getConnection();
+
+// Add a layout plugin to an existing entity view display.
+$display = $connection->select('config')
+  ->fields('config', ['data'])
+  ->condition('collection', '')
+  ->condition('name', 'core.entity_view_display.node.article.teaser')
+  ->execute()
+  ->fetchField();
+$display = unserialize($display);
+$display['dependencies']['module'][] = 'layout_builder';
+$display['dependencies']['module'][] = 'layout_discovery';
+$display['third_party_settings']['layout_builder']['allow_custom'] = FALSE;
+$display['third_party_settings']['layout_builder']['enabled'] = TRUE;
+$display['third_party_settings']['layout_builder']['sections'][] = [
+  'layout_id' => 'layout_onecol',
+  'layout_settings' => ['label' => ''],
+  'components' => [
+    '92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc' => [
+      'uuid' => '92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc',
+      'region' => 'content',
+      'configuration' => [
+        'id' => 'field_block:node:article:field_image',
+        'label_display' => '0',
+        'context_mapping' => [
+          'entity' => 'layout_builder.entity',
+        ],
+        'formatter' => [
+          'type' => 'image',
+          'label' => 'hidden',
+          'settings' => [
+            'image_link' => '',
+            'image_style' => 'wide',
+            'image_loading' => [
+              'attribute' => 'eager',
+            ],
+          ],
+          'third_party_settings' => [],
+        ],
+      ],
+      'weight' => 0,
+      'additional' => [
+        'key' => 'value',
+        'another_key' => 'another_value',
+      ],
+      'third_party_settings' => [
+        'layout_builder_defaults_test' => [
+          'harold' => 'maude',
+        ],
+      ],
+    ],
+    '2b3961a0-1c6f-4264-b01f-525a23e8c2b6' => [
+      'uuid' => '2b3961a0-1c6f-4264-b01f-525a23e8c2b6',
+      'region' => 'content',
+      'configuration' => [
+        'id' => 'field_block:node:article:body',
+        'label_display' => '0',
+        'context_mapping' => [
+          'entity' => 'layout_builder.entity',
+        ],
+        'formatter' => [
+          'type' => 'text_default',
+          'label' => 'hidden',
+          'settings' => [],
+          'third_party_settings' => [],
+        ],
+      ],
+      'weight' => 1,
+      'additional' => [],
+    ],
+  ],
+  'third_party_settings' => [],
+];
+$connection->update('config')
+  ->fields(['data' => serialize($display)])
+  ->condition('collection', '')
+  ->condition('name', 'core.entity_view_display.node.article.teaser')
+  ->execute();
+
+// Update core.extension.
+$extensions = $connection->select('config')
+  ->fields('config', ['data'])
+  ->condition('collection', '')
+  ->condition('name', 'core.extension')
+  ->execute()
+  ->fetchField();
+$extensions = unserialize($extensions);
+$extensions['module']['layout_builder_defaults_test'] = 0;
+$connection->update('config')
+  ->fields(['data' => serialize($extensions)])
+  ->condition('collection', '')
+  ->condition('name', 'core.extension')
+  ->execute();
diff --git a/core/modules/layout_builder/tests/fixtures/update/layout-builder.php b/core/modules/layout_builder/tests/fixtures/update/layout-builder.php
new file mode 100644
index 00000000000..bd3be4e3633
--- /dev/null
+++ b/core/modules/layout_builder/tests/fixtures/update/layout-builder.php
@@ -0,0 +1,47 @@
+<?php
+
+/**
+ * @file
+ * Install layout_builder module before testing update paths.
+ */
+
+use Drupal\Core\Database\Database;
+
+$connection = Database::getConnection();
+
+// Update core.extension.
+$extensions = $connection->select('config')
+  ->fields('config', ['data'])
+  ->condition('collection', '')
+  ->condition('name', 'core.extension')
+  ->execute()
+  ->fetchField();
+$extensions = unserialize($extensions);
+$extensions['module']['layout_builder'] = 0;
+$extensions['module']['layout_discovery'] = 0;
+$connection->update('config')
+  ->fields(['data' => serialize($extensions)])
+  ->condition('collection', '')
+  ->condition('name', 'core.extension')
+  ->execute();
+
+// Add all layout_builder_removed_post_updates() as existing updates.
+require_once __DIR__ . '/../../../../layout_builder/layout_builder.post_update.php';
+require_once __DIR__ . '/../../../../layout_discovery/layout_discovery.post_update.php';
+$existing_updates = $connection->select('key_value')
+  ->fields('key_value', ['value'])
+  ->condition('collection', 'post_update')
+  ->condition('name', 'existing_updates')
+  ->execute()
+  ->fetchField();
+$existing_updates = unserialize($existing_updates);
+$existing_updates = array_merge(
+  $existing_updates,
+  array_keys(layout_builder_removed_post_updates()),
+  array_keys(layout_discovery_removed_post_updates())
+);
+$connection->update('key_value')
+  ->fields(['value' => serialize($existing_updates)])
+  ->condition('collection', 'post_update')
+  ->condition('name', 'existing_updates')
+  ->execute();
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml
index 069aa034195..2474784e12f 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml
+++ b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml
@@ -23,6 +23,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 1
             additional: {  }
+            third_party_settings: {  }
 id: entity_test.bundle_with_extra_fields.default
 targetEntityType: entity_test
 bundle: bundle_with_extra_fields
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml
index 804642885ef..82b891e78ac 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml
+++ b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml
@@ -12,3 +12,10 @@ block.settings.my_plugin_id:
     some_configuration:
       type: string
       label: 'Some configuration value'
+
+layout_builder.component.third_party.layout_builder_defaults_test:
+  type: mapping
+  mapping:
+    harold:
+      type: string
+      label: Some arbitrary string.
diff --git a/core/modules/layout_builder/tests/src/Functional/Update/ThirdPartySectionComponentUpdateTest.php b/core/modules/layout_builder/tests/src/Functional/Update/ThirdPartySectionComponentUpdateTest.php
new file mode 100644
index 00000000000..c7702a39706
--- /dev/null
+++ b/core/modules/layout_builder/tests/src/Functional/Update/ThirdPartySectionComponentUpdateTest.php
@@ -0,0 +1,53 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\layout_builder\Functional\Update;
+
+use Drupal\FunctionalTests\Update\UpdatePathTestBase;
+
+/**
+ * Tests the update path for section components.
+ *
+ * @group layout_builder
+ * @group legacy
+ */
+class ThirdPartySectionComponentUpdateTest extends UpdatePathTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setDatabaseDumpFiles(): void {
+    $this->databaseDumpFiles = [
+      __DIR__ . '/../../../../../system/tests/fixtures/update/drupal-10.3.0.bare.standard.php.gz',
+      __DIR__ . '/../../../fixtures/update/layout-builder.php',
+      __DIR__ . '/../../../fixtures/update/layout-builder-sections.php',
+    ];
+  }
+
+  /**
+   * Tests the update path for section components.
+   */
+  public function testRunUpdates(): void {
+    $this->expectDeprecation('Setting additional properties is deprecated in drupal:11.3.0 and is removed from drupal:12.0.0. Additional component properties should be set via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177');
+
+    $display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.article.teaser')->toArray();
+    $before_section = $display['third_party_settings']['layout_builder']['sections'][0]->toArray();
+    $this->assertEmpty($before_section['components']['2b3961a0-1c6f-4264-b01f-525a23e8c2b6']['additional']);
+    $this->assertNotEmpty($before_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['additional']);
+    $this->assertEmpty($before_section['components']['2b3961a0-1c6f-4264-b01f-525a23e8c2b6']['third_party_settings']);
+    $this->assertNotEmpty($before_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['third_party_settings']);
+
+    $this->runUpdates();
+
+    $display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.article.teaser')->toArray();
+    $after_section = $display['third_party_settings']['layout_builder']['sections'][0]->toArray();
+    $this->assertEmpty($after_section['components']['2b3961a0-1c6f-4264-b01f-525a23e8c2b6']['additional']);
+    $this->assertNotEmpty($after_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['additional']);
+    $this->assertEquals($before_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['additional'], $after_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['additional']);
+    $this->assertEmpty($after_section['components']['2b3961a0-1c6f-4264-b01f-525a23e8c2b6']['third_party_settings']);
+    $this->assertNotEmpty($after_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['third_party_settings']);
+    $this->assertEquals($before_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['third_party_settings'], $after_section['components']['92bf8983-64cc-4f7d-b8c5-1ff9c6a5d7dc']['third_party_settings']);
+  }
+
+}
diff --git a/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php b/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php
index 695429b09f8..a279061b6f1 100644
--- a/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php
+++ b/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php
@@ -117,7 +117,7 @@ public static function providerTestAccess() {
         'layout_onecol',
         [],
         [
-          '10000000-0000-1000-a000-000000000000' => new SectionComponent('10000000-0000-1000-a000-000000000000', 'content', ['id' => 'foo'], ['harold' => 'maude']),
+          '10000000-0000-1000-a000-000000000000' => new SectionComponent('10000000-0000-1000-a000-000000000000', 'content', ['id' => 'foo'], [], ['layout_builder_defaults_test' => ['harold' => 'maude']]),
         ],
         ['layout_builder_defaults_test' => ['which_party' => 'third']]
       ),
diff --git a/core/modules/layout_builder/tests/src/Kernel/Plugin/ConfigAction/AddComponentTest.php b/core/modules/layout_builder/tests/src/Kernel/Plugin/ConfigAction/AddComponentTest.php
index e91daa37ef7..a7610adedf9 100644
--- a/core/modules/layout_builder/tests/src/Kernel/Plugin/ConfigAction/AddComponentTest.php
+++ b/core/modules/layout_builder/tests/src/Kernel/Plugin/ConfigAction/AddComponentTest.php
@@ -104,8 +104,8 @@ public function testAddComponent(array $config_action_value, string $expected_re
     $this->assertSame($existing_component_expected_weight, $components['1445597a-c674-431d-ac0a-277d99347a7f']->getWeight());
     // Assert the component configuration (defined with its config schema), and the
     // additional configuration (ignored in config schema)
-    $this->assertSame($config_action_value['component']['configuration'], $components[$uuid]->get('configuration'));
-    $this->assertSame($config_action_value['component']['additional'] ?? [], $components[$uuid]->get('additional'));
+    $this->assertSame($config_action_value['component']['configuration'], $components[$uuid]->getConfiguration());
+    $this->assertSame($config_action_value['component']['third_party_settings']['layout_builder_defaults_test'] ?? [], $components[$uuid]->getThirdPartySettings('layout_builder_defaults_test'));
   }
 
   /**
@@ -165,8 +165,10 @@ public static function provider(): \Generator {
             'id' => 'my_plugin_id',
             'some_configuration' => 'my_configuration_value',
           ],
-          'additional' => [
-            'some_additional_value' => 'my_custom_value',
+          'third_party_settings' => [
+            'layout_builder_defaults_test' => [
+              'harold' => 'my_custom_value',
+            ],
           ],
         ],
       ],
@@ -188,8 +190,10 @@ public static function provider(): \Generator {
             'id' => 'my_plugin_id',
             'some_configuration' => 'my_configuration_value',
           ],
-          'additional' => [
-            'some_additional_value' => 'my_custom_value',
+          'third_party_settings' => [
+            'layout_builder_defaults_test' => [
+              'harold' => 'my_custom_value',
+            ],
           ],
         ],
       ],
@@ -374,7 +378,7 @@ public function testAddComponentToEmptyRegionThatIsNotFirst(): void {
 
     $this->assertSame('bottom', $components[$uuid]->getRegion());
     $this->assertSame(0, $components[$uuid]->getWeight());
-    $this->assertSame(['id' => 'my_plugin_id'], $components[$uuid]->get('configuration'));
+    $this->assertSame(['id' => 'my_plugin_id'], $components[$uuid]->getConfiguration());
   }
 
   /**
diff --git a/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php b/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php
index 0561034479e..4a2214d1ac1 100644
--- a/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php
+++ b/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php
@@ -11,6 +11,7 @@
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
 use Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent;
 use Drupal\layout_builder\LayoutBuilderEvents;
+use Drupal\layout_builder\Section;
 use Drupal\layout_builder\SectionComponent;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
@@ -22,6 +23,38 @@
  */
 class SectionComponentTest extends UnitTestCase {
 
+  /**
+   * The section object to test.
+   *
+   * @var \Drupal\layout_builder\Section
+   */
+  protected $section;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $component = new SectionComponent(
+      'some-uuid',
+      'some-region',
+      ['id' => 'existing-block-id'],
+      [],
+      [
+        'Tech' => [
+          'Bill Bob' => 'TPS reports',
+          'Milton Adams' => 'Red Stapler',
+        ],
+        'Llama' => [
+          'flair' => TRUE,
+        ],
+      ]
+    );
+
+    $this->section = new Section('layout_onecol', [], [$component]);
+  }
+
   /**
    * @covers ::toRenderArray
    */
@@ -70,4 +103,227 @@ public function testToRenderArray(): void {
     $this->assertEquals($expected, $result);
   }
 
+  /**
+   * @covers ::getThirdPartySettings
+   * @dataProvider providerTestGetThirdPartySettings
+   */
+  public function testGetThirdPartySettings($provider, $expected): void {
+    $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySettings($provider));
+  }
+
+  /**
+   * Provides test data for ::testGetThirdPartySettings().
+   *
+   * @return array
+   *   Third party settings.
+   */
+  public static function providerTestGetThirdPartySettings(): array {
+    $data = [];
+    $data['Tech third party settings'] = [
+      'Tech',
+      [
+        'Bill Bob' => 'TPS reports',
+        'Milton Adams' => 'Red Stapler',
+      ],
+    ];
+    $data['Llama third party settings'] = [
+      'Llama',
+      ['flair' => TRUE],
+    ];
+    $data['Nonexisting provider'] = [
+      'non_existing_provider',
+      [],
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::getThirdPartySetting
+   * @dataProvider providerTestGetThirdPartySetting
+   */
+  public function testGetThirdPartySetting($provider, $key, $expected, $default = FALSE): void {
+    if ($default) {
+      $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySetting($provider, $key, $default));
+      return;
+    }
+    $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySetting($provider, $key));
+  }
+
+  /**
+   * Provides test data for ::testGetThirdPartySetting().
+   *
+   * @return array
+   *   Third party settings.
+   */
+  public static function providerTestGetThirdPartySetting(): array {
+    $data = [];
+    $data['Tech third party setting for "Bill Bob" key'] = [
+      'Tech',
+      'Bill Bob',
+      'TPS reports',
+    ];
+    $data['Llama third party setting for "flair" key'] = [
+      'Llama',
+      'flair',
+      TRUE,
+    ];
+    $data['Llama third party setting for nonexisting key'] = [
+      'Llama',
+      'non_existing_key',
+      NULL,
+    ];
+    $data['Nonexisting provider third party setting for nonexisting key'] = [
+      'non_existing_provider',
+      'non_existing_key',
+      NULL,
+    ];
+    $data['Nonexisting provider third party setting for nonexisting key with a default value provided'] = [
+      'non_existing_provider',
+      'non_existing_key',
+      'default value',
+      'default value',
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::setThirdPartySetting
+   * @dataProvider providerTestSetThirdPartySetting
+   */
+  public function testSetThirdPartySetting($provider, $key, $value, $expected): void {
+    $this->section->getComponent('some-uuid')->setThirdPartySetting($provider, $key, $value);
+    $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySettings($provider));
+  }
+
+  /**
+   * Provides test data for ::testSetThirdPartySettings().
+   *
+   * @return array
+   *   Third party settings.
+   */
+  public static function providerTestSetThirdPartySetting(): array {
+    $data = [];
+    $data['Override "Milton Adams" third party setting for Tech provider'] = [
+      'Tech',
+      'Milton Adams',
+      'Storage B',
+      [
+        'Bill Bob' => 'TPS reports',
+        'Milton Adams' => 'Storage B',
+      ],
+    ];
+    $data['Add "Peter Gibbons" third party setting for Tech provider'] = [
+      'Tech',
+      'Peter Gibbons',
+      'Programmer',
+      [
+        'Bill Bob' => 'TPS reports',
+        'Milton Adams' => 'Red Stapler',
+        'Peter Gibbons' => 'Programmer',
+      ],
+    ];
+    $data['Add "Medical Providers" provider third party settings'] = [
+      'Medical Providers',
+      'Dr. Swanson',
+      'Hypnotist',
+      [
+        'Dr. Swanson' => 'Hypnotist',
+      ],
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::unsetThirdPartySetting
+   * @dataProvider providerTestUnsetThirdPartySetting
+   */
+  public function testUnsetThirdPartySetting($provider, $key, $expected): void {
+    $this->section->getComponent('some-uuid')->unsetThirdPartySetting($provider, $key);
+    $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySettings($provider));
+  }
+
+  /**
+   * Provides test data for ::testUnsetThirdPartySetting().
+   *
+   * @return array
+   *   Third party settings.
+   */
+  public static function providerTestUnsetThirdPartySetting(): array {
+    $data = [];
+    $data['Key with values'] = [
+      'Tech',
+      'Bill Bob',
+      [
+        'Milton Adams' => 'Red Stapler',
+      ],
+    ];
+    $data['Key without values'] = [
+      'Llama',
+      'flair',
+      [],
+    ];
+    $data['Non-existing key'] = [
+      'Llama',
+      'non_existing_key',
+      [
+        'flair' => TRUE,
+      ],
+    ];
+    $data['Non-existing provider'] = [
+      'non_existing_provider',
+      'non_existing_key',
+      [],
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::getThirdPartyProviders
+   */
+  public function testGetThirdPartyProviders(): void {
+    $this->assertSame(['Tech', 'Llama'], $this->section->getComponent('some-uuid')->getThirdPartyProviders());
+    $this->section->getComponent('some-uuid')->unsetThirdPartySetting('Llama', 'flair');
+    $this->assertSame(['Tech'], $this->section->getComponent('some-uuid')->getThirdPartyProviders());
+  }
+
+  /**
+   * Tests that deprecation notices are triggered.
+   *
+   * @group legacy
+   *
+   * @todo Remove below test when the drupal:12.x branch is opened.
+   * @see https://www.drupal.org/project/drupal/issues/3160644
+   */
+  public function testDeprecationNotices(): void {
+    $this->expectDeprecation('Setting random section component properties is deprecated in drupal:11.3.0 and is removed from drupal:12.0.0. Component properties should be set via dedicated setters. See https://www.drupal.org/node/3100177');
+    $this->expectDeprecation('Getting additional properties is deprecated in drupal:11.3.0 and is removed from drupal:12.0.0. Additional component properties should be gotten via ::getThirdPartySetting(). See https://www.drupal.org/node/3100177');
+
+    // Instantiate SectionComponent with additional settings is deprecated.
+    new SectionComponent(
+      'some-uuid',
+      'some-region',
+      [],
+      // Provide deprecated 'additional' argument.
+      [
+        'spoiler-alert' => [
+          'glitch-in-accounting' => 'fixed',
+          'building-arson' => 'probably',
+          'milton-on-beach' => TRUE,
+        ],
+      ],
+      [],
+    );
+
+    // Instantiate SectionComponent object with preferred create() method.
+    $component = new SectionComponent(
+      'some-uuid',
+      'some-region',
+      [],
+      [],
+    );
+    // Call deprecated set() and get() methods.
+    $component->set('music', 'very 90s');
+    $component->get('music');
+  }
+
 }
diff --git a/core/modules/navigation/tests/src/Kernel/ConfigAction/AddNavigationBlockConfigActionTest.php b/core/modules/navigation/tests/src/Kernel/ConfigAction/AddNavigationBlockConfigActionTest.php
index 63b00b08f7e..77c6211abd2 100644
--- a/core/modules/navigation/tests/src/Kernel/ConfigAction/AddNavigationBlockConfigActionTest.php
+++ b/core/modules/navigation/tests/src/Kernel/ConfigAction/AddNavigationBlockConfigActionTest.php
@@ -79,7 +79,7 @@ public function testAddBlockToNavigation($delta, $computed_delta): void {
     $this->assertCount(4, $components);
     $component = array_values($components)[$computed_delta];
     $this->assertSame('content', $component->getRegion());
-    $this->assertEquals($data['configuration'], $component->get('configuration'));
+    $this->assertEquals($data['configuration'], $component->getConfiguration());
   }
 
   /**
diff --git a/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml b/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml
index 3a21bf3cde2..58a37913aca 100644
--- a/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml
+++ b/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml
@@ -39,6 +39,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           02d32417-145b-41a4-8d7a-27e4477b9666:
             uuid: 02d32417-145b-41a4-8d7a-27e4477b9666
             region: content
@@ -56,6 +57,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 1
             additional: {  }
+            third_party_settings: {  }
           f73af85e-15fc-4672-8b72-3ed91353e08c:
             uuid: f73af85e-15fc-4672-8b72-3ed91353e08c
             region: content
@@ -71,6 +73,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 2
             additional: {  }
+            third_party_settings: {  }
           957850fc-d5ea-4a6f-b3c9-dd2e4811a5c4:
             uuid: 957850fc-d5ea-4a6f-b3c9-dd2e4811a5c4
             region: content
@@ -81,6 +84,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 3
             additional: {  }
+            third_party_settings: {  }
           937c9738-b63e-409f-897a-c9fc98f6716e:
             uuid: 937c9738-b63e-409f-897a-c9fc98f6716e
             region: content
@@ -91,6 +95,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 4
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
 id: node.article.full
 targetEntityType: node
diff --git a/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml b/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml
index 17233e07dd9..42ce28ce2dc 100644
--- a/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml
+++ b/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml
@@ -36,6 +36,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           57ad7b26-a88b-439e-a056-40f2de29a943:
             uuid: 57ad7b26-a88b-439e-a056-40f2de29a943
             region: content
@@ -46,6 +47,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 1
             additional: {  }
+            third_party_settings: {  }
           01b94e28-e38c-4849-98d6-ed77bca30afc:
             uuid: 01b94e28-e38c-4849-98d6-ed77bca30afc
             region: content
@@ -56,6 +58,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 2
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
 id: node.page.full
 targetEntityType: node
diff --git a/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml b/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
index 568bc71634d..7990914d5f6 100644
--- a/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
+++ b/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
@@ -51,6 +51,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 3
             additional: {  }
+            third_party_settings: {  }
           0eff9e1d-4e73-4748-b910-e5568df1d5aa:
             uuid: 0eff9e1d-4e73-4748-b910-e5568df1d5aa
             region: content
@@ -67,6 +68,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 2
             additional: {  }
+            third_party_settings: {  }
           44801518-fe93-421a-bdcb-550493c7925d:
             uuid: 44801518-fe93-421a-bdcb-550493c7925d
             region: content
@@ -82,6 +84,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 4
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
       -
         layout_id: layout_oneplusfourgrid_section
@@ -107,6 +110,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 4
             additional: {  }
+            third_party_settings: {  }
           df8bfafc-210c-4d86-9745-e47081ab0fd4:
             uuid: df8bfafc-210c-4d86-9745-e47081ab0fd4
             region: fifth
@@ -122,6 +126,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           a2d450d0-08ce-4123-bca0-411bfa1da132:
             uuid: a2d450d0-08ce-4123-bca0-411bfa1da132
             region: fourth
@@ -139,6 +144,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           f91febc6-d924-47a2-8ffd-b71d3b2597c7:
             uuid: f91febc6-d924-47a2-8ffd-b71d3b2597c7
             region: third
@@ -156,6 +162,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           00488840-db50-4afe-9c30-a123e6707fa9:
             uuid: 00488840-db50-4afe-9c30-a123e6707fa9
             region: second
@@ -173,6 +180,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           69d8bce1-28ae-4287-a05b-a2166679f867:
             uuid: 69d8bce1-28ae-4287-a05b-a2166679f867
             region: first
@@ -192,6 +200,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
       -
         layout_id: layout_twocol_section
@@ -215,6 +224,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           f61cae40-5865-4c4c-98fa-14b8234e7b98:
             uuid: f61cae40-5865-4c4c-98fa-14b8234e7b98
             region: second
@@ -230,6 +240,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
       -
         layout_id: layout_onecol
@@ -246,6 +257,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 0
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
       -
         layout_id: layout_onecol
@@ -266,6 +278,7 @@ third_party_settings:
               items_per_page: null
             weight: 0
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
 id: node.recipe.full
 targetEntityType: node
diff --git a/core/tests/fixtures/default_content/node/32650de8-9edd-48dc-80b8-8bda180ebbac.yml b/core/tests/fixtures/default_content/node/32650de8-9edd-48dc-80b8-8bda180ebbac.yml
index e2cc0400c2c..64d65a90117 100644
--- a/core/tests/fixtures/default_content/node/32650de8-9edd-48dc-80b8-8bda180ebbac.yml
+++ b/core/tests/fixtures/default_content/node/32650de8-9edd-48dc-80b8-8bda180ebbac.yml
@@ -46,6 +46,7 @@ default:
                 entity: layout_builder.entity
             weight: 1
             additional: {  }
+            third_party_settings: {  }
           03b45f14-cf74-469a-8398-edf3383ce7fa:
             uuid: 03b45f14-cf74-469a-8398-edf3383ce7fa
             region: content
@@ -57,4 +58,6 @@ default:
               context_mapping: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
